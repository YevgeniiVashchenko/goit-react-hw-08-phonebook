{"version":3,"file":"static/js/236.8927b9b1.chunk.js","mappings":"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","sources":["components/UserMenu/UserMenu.styled.jsx","components/UserMenu/UserMenu.jsx","components/ContactListElem/ContactListElem.styled.jsx","components/SureModal/SureModal.styled.jsx","components/SureModal/SureModal.jsx","components/AddContactForm/AddContactForm.styled.jsx","components/AddContactForm/AddContactForm.jsx","components/ContactMenu/ContactMenu.styled.jsx","components/ContactMenu/ContactMenu.jsx","components/ContactListElem/ContactListElem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.styled.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport Button from 'react-bootstrap/Button';\n\nexport const Container = styled.div`\n  padding: 20px 10px;\n  text-align: center;\n  font-size: 18px;\n`;\n\nexport const WellcomePhrase = styled.h3`\n  margin-top: 20px;\n  font-weight: 700;\n  font-size: 22px;\n`;\n\nexport const PictureThumb = styled.div`\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  overflow: hidden;\n  margin: 20px auto 10px;\n  border: 4px solid black;\n`;\n\nexport const Picture = styled.img`\n  height: 150px;\n`;\n\nexport const UsernameText = styled.p`\n  font-weight: 500;\n  font-size: 22px;\n`;\n\nexport const StyledButton = styled(Button)`\n  margin-top: 10px;\n  font-size: 18px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { selectUsername, selectEmail } from 'redux/selectors';\nimport { logOut } from 'redux/operations';\nimport {\n  Container,\n  WellcomePhrase,\n  PictureThumb,\n  Picture,\n  UsernameText,\n  StyledButton,\n} from './UserMenu.styled';\n\nexport const UserMenu = () => {\n  const username = useSelector(selectUsername);\n  const email = useSelector(selectEmail);\n  const dispatch = useDispatch();\n\n  const setPicture = () => {\n    const ratio = window.devicePixelRatio;\n    return ratio > 1\n      ? require('../../images/user.jpg')\n      : require('../../images/user@2x.jpg');\n  };\n\n  const handleClick = () => {\n    dispatch(logOut());\n  };\n\n  return (\n    <Container>\n      <WellcomePhrase>Wellcome to Phonebook!</WellcomePhrase>\n      <p>We've been waiting for you.</p>\n      <PictureThumb>\n        <Picture src={setPicture()} alt=\"User Phone\" />\n      </PictureThumb>\n      <UsernameText>{username}</UsernameText>\n      <p>{email}</p>\n      <StyledButton onClick={handleClick} variant=\"dark\" type=\"button\">\n        Logout\n      </StyledButton>\n    </Container>\n  );\n};","import styled from 'styled-components';\nimport Card from 'react-bootstrap/Card';\n\nexport const ListElem = styled.li`\n  font-size: 18px;\n`;\n\nexport const StyledCard = styled(Card)`\n  position: relative;\n  width: 250px;\n  height: 250px;\n  text-align: center;\n  & svg {\n    width: 70px;\n    height: 70px;\n    margin-bottom: 10px;\n  }\n`;","import styled from 'styled-components';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nexport const StyledButton = styled(Button)`\n  margin-top: 15px;\n  margin-left: 25px;\n  width: 120px;\n  font-size: 18px;\n`;\n\nexport const ModalContainer = styled(Modal)`\n  text-align: center;\n  font-size: 18px;\n`;\n\nexport const ModalFooter = styled(Modal.Footer)`\n  display: flex;\n  gap: 30px;\n  justify-content: center;\n`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport { StyledButton, ModalContainer, ModalFooter } from './SureModal.styled';\n\nexport const SureModal = ({ contactId }) => {\n  const [show, setShow] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const handleDelete = evtId => {\n    dispatch(deleteContact(evtId));\n  };\n\n  return (\n    <>\n      <StyledButton variant=\"danger\" onClick={handleShow}>\n        Delete\n      </StyledButton>\n\n      <ModalContainer show={show} onHide={handleClose}>\n        <Modal.Header closeButton> </Modal.Header>\n        <Modal.Body>Are you sure?</Modal.Body>\n        <ModalFooter>\n          <Button\n            variant=\"danger\"\n            type=\"button\"\n            onClick={() => handleDelete(contactId)}\n          >\n            Yes\n          </Button>\n          <Button variant=\"dark\" type=\"button\" onClick={handleClose}>\n            No\n          </Button>\n        </ModalFooter>\n      </ModalContainer>\n    </>\n  );\n};\n\nSureModal.propTypes = {\n  contactId: PropTypes.string.isRequired,\n};","import styled from 'styled-components';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nexport const StyledButton = styled(Button)`\n  padding: 5px 10px;\n  width: ${props => (props.type === 'user' ? '200px' : '120px')};\n  margin-top: ${props => props.type === 'contact' && '15px'};\n  margin: ${props => props.type === 'user' && '0'};\n  font-weight: ${props => (props.type === 'user' ? 500 : 400)};\n  font-size: 18px;\n`;\n\nexport const FormContainer = styled(Form)`\n  width: 100%;\n  font-size: 18px;\n`;\n\nexport const Label = styled(Form.Label)`\n  display: block;\n  :not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Input = styled(Form.Control)`\n  margin-top: 5px;\n  :focus,\n  :active {\n    outline: 4px solid #c0bdbd;\n  }\n`;\n\nexport const SubmitButton = styled(Button)`\n  margin-left: 75%;\n`;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact, editContact } from 'redux/operations';\nimport { useFormik } from 'formik';\nimport { object, string } from 'yup';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport { ErrorMessage } from '../ErrorMessage/ErrorMessage';\nimport {\n  StyledButton,\n  FormContainer,\n  Label,\n  Input,\n  SubmitButton,\n} from './AddContactForm.styled';\n\nexport const AddContactForm = ({\n  type = 'user',\n  contact = {\n    name: '',\n    number: '',\n  },\n}) => {\n  const [show, setShow] = useState(false);\n  const [isSameMessage, setIsSameMessage] = useState(null);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleCheck = checkName => {\n    const check = contacts.filter(\n      contact => contact.name.toLowerCase() === checkName.toLowerCase()\n    );\n    if (check.length) {\n      setIsSameMessage(`${checkName} is already in contacts`);\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const FormSchema = object({\n    name: string()\n      .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n        message:\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n        excludeEmptyString: true,\n      })\n      .required('Required'),\n    number: string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        {\n          message:\n            'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n          excludeEmptyString: true,\n        }\n      )\n      .required('Required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: contact.name,\n      number: contact.number,\n    },\n    validationSchema: FormSchema,\n    onSubmit: (values, { resetForm }) => {\n      if (type === 'user' && handleCheck(values.name) === false) {\n        return;\n      } else {\n        setIsSameMessage(null);\n        const data = contact.id ? { ...values, id: contact.id } : values;\n\n        type === 'user'\n          ? dispatch(addContact(data))\n          : dispatch(editContact(data));\n        resetForm({\n          name: '',\n          number: '',\n        });\n        setShow(false);\n      }\n    },\n  });\n\n  const handleShow = () => {\n    setIsSameMessage(null);\n    setShow(true);\n  };\n  const handleClose = () => {\n    formik.resetForm({\n      name: '',\n      number: '',\n    });\n    setShow(false);\n  };\n\n  return (\n    <>\n      <StyledButton variant=\"dark\" type={type} onClick={handleShow}>\n        {type === 'user' ? 'Add contact' : 'Edit'}\n      </StyledButton>\n\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            {type === 'user' ? 'Add new contact' : 'Edit contact'}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <FormContainer onSubmit={formik.handleSubmit}>\n            <Label>\n              Contact name\n              <Input\n                name=\"name\"\n                type=\"text\"\n                placeholder=\"Samanta Smith\"\n                onChange={formik.handleChange}\n                value={formik.values.name}\n                isValid={formik.touched.name}\n                isInvalid={formik.errors.name}\n                autoFocus\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formik.errors.name}\n              </Form.Control.Feedback>\n            </Label>\n            <Label>\n              Phone number\n              <Input\n                name=\"number\"\n                type=\"tel\"\n                placeholder=\"111-11-11\"\n                onChange={formik.handleChange}\n                value={formik.values.number}\n                isValid={formik.touched.number}\n                isInvalid={formik.errors.number}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {formik.errors.number}\n              </Form.Control.Feedback>\n            </Label>\n            <SubmitButton variant=\"dark\" type=\"submit\">\n              {type === 'user' ? 'Add contact' : 'Edit contact'}\n            </SubmitButton>\n          </FormContainer>\n          {isSameMessage && <ErrorMessage message={isSameMessage} />}\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nAddContactForm.propTypes = {\n  type: PropTypes.string,\n  contact: PropTypes.shape({\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n};","import styled from 'styled-components';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport Button from 'react-bootstrap/Button';\n\nexport const OpenBtn = styled(Button)`\n  margin-top: 10px;\n  font-size: 18px;\n`;\n\nexport const Container = styled(Offcanvas)`\n  width: 600px;\n  padding: 10px 20px;\n  text-align: center;\n  font-size: 20px;\n`;\n\nexport const PictureThumb = styled.div`\n  width: 150px;\n  height: 150px;\n  border-radius: 50%;\n  overflow: hidden;\n  margin: 0 auto 10px;\n  border: 4px solid black;\n`;\n\nexport const Picture = styled.img`\n  height: 150px;\n`;\n\nexport const ContactTitle = styled.h4`\n  margin-bottom: 10px;\n  font-size: 26px;\n`;\n\nexport const StyledLink = styled.a`\n  display: block;\n  margin-top: 10px;\n  padding: 7px 10px;\n  border-radius: 5px;\n  background-color: #212529;\n  font-size: 18px;\n  color: white;\n  :hover,\n  :focus,\n  :active {\n    color: white;\n  }\n`;\n\nexport const StyledButton = styled(Button)`\n  display: inline-block;\n  margin-top: 15px;\n  width: 120px;\n  margin-right: 25px;\n  font-size: 18px;\n`;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Offcanvas from 'react-bootstrap/Offcanvas';\nimport { SureModal } from 'components/SureModal/SureModal';\nimport { AddContactForm } from 'components/AddContactForm/AddContactForm';\nimport {\n  OpenBtn,\n  Container,\n  PictureThumb,\n  Picture,\n  ContactTitle,\n  StyledLink,\n} from './ContactMenu.styled';\n\nexport const ContactMenu = ({ contact }) => {\n  const [show, setShow] = useState(false);\n\n  const setPicture = () => {\n    const ratio = window.devicePixelRatio;\n    return ratio > 1\n      ? require('../../images/contact.jpg')\n      : require('../../images/contact@2x.png');\n  };\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <OpenBtn variant=\"dark\" onClick={handleShow}>\n        View details\n      </OpenBtn>\n\n      <Container show={show} placement=\"end\" onHide={handleClose}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Selected Contact</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <PictureThumb>\n            <Picture src={setPicture()} alt=\"User Phone\" />\n          </PictureThumb>\n          <ContactTitle>{contact.name}</ContactTitle>\n          <p>{contact.number}</p>\n          <StyledLink href={`tel:${contact.number}`}>Call contact</StyledLink>\n          <AddContactForm type=\"contact\" contact={contact} />\n          <SureModal contactId={contact.id} />\n        </Offcanvas.Body>\n      </Container>\n    </>\n  );\n};\n\nContactMenu.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};","import PropTypes from 'prop-types';\nimport { ListElem } from './ContactListElem.styled';\nimport { ContactMenu } from '../ContactMenu/ContactMenu';\nimport { FaUserCircle } from 'react-icons/fa';\nimport Card from 'react-bootstrap/Card';\nimport { StyledCard } from './ContactListElem.styled';\n\nexport const ContactListElem = ({ contact }) => {\n  return (\n    <ListElem>\n      <StyledCard border=\"dark\">\n        <Card.Body>\n          <FaUserCircle />\n          <Card.Title>{contact.name}</Card.Title>\n          <Card.Text>{contact.number}</Card.Text>\n          <ContactMenu contact={contact} />\n        </Card.Body>\n      </StyledCard>\n    </ListElem>\n  );\n};\n\nContactListElem.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin: 0;\n  padding: 20px 0;\n`;","import { useSelector } from 'react-redux';\nimport { selectFiltredContacts } from 'redux/selectors';\nimport { ContactListElem } from '../ContactListElem/ContactListElem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFiltredContacts);\n\n  const makeList = arrey => {\n    return arrey.map(contact => {\n      return <ContactListElem key={contact.id} contact={contact} />;\n    });\n  };\n\n  return <List>{makeList(contacts)}</List>;\n};\n","import styled from 'styled-components';\nimport Form from 'react-bootstrap/Form';\nimport { BiSearch } from 'react-icons/bi';\n\nexport const Label = styled(Form.Label)`\n  display: block;\n  margin: 0;\n  text-align: center;\n  font-size: 18px;\n  font-weight: 500;\n  > svg {\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nexport const Input = styled(Form.Control)`\n  display: inline-block;\n  width: 700px;\n  /* margin-top: 10px; */\n  padding-left: 50px;\n  :focus,\n  :active {\n    outline: 4px solid #c0bdbd;\n  }\n`;\n\nexport const SearchIcon = styled(BiSearch)`\n  position: relative;\n  left: 40px;\n`;","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\nimport Form from 'react-bootstrap/Form';\nimport { Label, Input, SearchIcon } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilter = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n  return (\n    <Form>\n      <Label>\n        <SearchIcon />\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contacts by name\"\n          onChange={handleFilter}\n        />\n      </Label>\n    </Form>\n  );\n};","import styled from 'styled-components';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport const Layout = styled(Row)`\n  margin: 0;\n  min-height: 90vh;\n`;\n\nexport const BigColumn = styled(Col)`\n  padding: 0 20px;\n  border-left: 4px solid black;\n`;\n\nexport const FilterThumb = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  padding: 15px 0;\n`;","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../redux/operations';\nimport Col from 'react-bootstrap/Col';\nimport { UserMenu } from '../../components/UserMenu/UserMenu';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { AddContactForm } from 'components/AddContactForm/AddContactForm';\nimport { Layout, BigColumn, FilterThumb } from './ContactsPage.styled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Layout>\n      <Col>\n        <UserMenu />\n      </Col>\n      <BigColumn xs={9}>\n        <FilterThumb>\n          <Filter />\n          <AddContactForm type=\"user\" />\n        </FilterThumb>\n        <ContactList />\n      </BigColumn>\n    </Layout>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Container","styled","WellcomePhrase","PictureThumb","Picture","UsernameText","StyledButton","Button","UserMenu","username","useSelector","selectUsername","email","selectEmail","dispatch","useDispatch","src","ratio","window","devicePixelRatio","require","setPicture","alt","onClick","logOut","variant","type","ListElem","StyledCard","Card","ModalContainer","Modal","ModalFooter","SureModal","contactId","useState","show","setShow","handleClose","onHide","closeButton","evtId","deleteContact","props","FormContainer","Form","Label","Input","SubmitButton","AddContactForm","contact","name","number","isSameMessage","setIsSameMessage","contacts","selectContacts","FormSchema","object","string","matches","message","excludeEmptyString","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","checkName","check","filter","toLowerCase","length","handleCheck","data","id","addContact","editContact","centered","handleSubmit","placeholder","onChange","handleChange","value","isValid","touched","isInvalid","errors","autoFocus","ErrorMessage","OpenBtn","Offcanvas","ContactTitle","StyledLink","ContactMenu","placement","href","ContactListElem","border","List","ContactList","arrey","selectFiltredContacts","map","SearchIcon","BiSearch","Filter","target","setFilter","Layout","Row","BigColumn","Col","FilterThumb","useEffect","fetchContacts","xs"],"sourceRoot":""}